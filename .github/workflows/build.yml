name: Build and Publish myNginx Image

on:
  schedule:
    - cron: "0 3 * * *"
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Get latest versions
        run: bash scripts/get-latest.sh

      - name: Convert owner name to lowercase
        env:
          REPO_OWNER: ${{ github.repository_owner }}
        run: echo "DOCKER_OWNER=${REPO_OWNER,,}" >> $GITHUB_ENV

      - name: Check if Nginx version already exists in GHCR
        id: check_version
        env:
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_OWNER: ${{ env.DOCKER_OWNER }}
          IMAGE_NAME: mynginx
          TAG: ${{ env.NGINX_VERSION }}
        run: |
          IMAGE_TAG="${IMAGE_OWNER}/${IMAGE_NAME}:${TAG}"
          echo "Checking if image tag ${IMAGE_TAG} already exists in GHCR..."
          
          AUTH_HEADER="Authorization: Bearer ${GHCR_TOKEN}"
          
          STATUS_CODE=$(curl -sL \
            -H "${AUTH_HEADER}" \
            -o /dev/null \
            -w "%{http_code}" \
            "https://ghcr.io/v2/${IMAGE_OWNER}/${IMAGE_NAME}/manifests/${TAG}")

          echo "GHCR API response status code: ${STATUS_CODE}"

          if [ "$STATUS_CODE" == "200" ]; then
            echo "âœ… Image tag ${TAG} already exists. Skipping build and push."
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "ðŸš€ Image tag ${TAG} not found. Proceeding with build."
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi
                    
      - name: Sync Nginx configure parameters
        if: steps.check_version.outputs.should_skip != 'true'
        run: echo "CONFIGURE_FLAGS='$(cat configure/parameters.txt | xargs)'" >> $GITHUB_ENV

      - name: Build Docker image
        uses: docker/build-push-action@v5
        if: steps.check_version.outputs.should_skip != 'true'
        run: |
          docker build \
            --build-arg NGINX_VERSION=${{ env.NGINX_VERSION }} \
            --build-arg OPENSSL_VERSION=${{ env.OPENSSL_VERSION }} \
            --build-arg CONFIGURE_FLAGS=${{ env.CONFIGURE_FLAGS }} \
            -t ghcr.io/${{ env.DOCKER_OWNER }}/mynginx:latest \
            -t ghcr.io/${{ env.DOCKER_OWNER }}/mynginx:${{ env.NGINX_VERSION }} \
            ./docker

      - name: Login to GitHub Container Registry
        if: steps.check_version.outputs.should_skip != 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Push Docker images
        if: steps.check_version.outputs.should_skip != 'true'
        run: |
          docker push ghcr.io/${{ env.DOCKER_OWNER }}/mynginx:${{ env.NGINX_VERSION }}
          docker push ghcr.io/${{ env.DOCKER_OWNER }}/mynginx:latest
